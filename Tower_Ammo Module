import pygame  
import random
import math
import time
from os import path

WIDTH = 699 #pixel width of screen
HEIGHT = 600#pixel height of screen
FPS = 120 #frames per second that the program runs

pygame.init()
pygame.mixer.init() #init sounds
screen = pygame.display.set_mode((1269, 600)) #sets display to the variable
pygame.display.set_caption("Tower Defence") #adds a caption
clock = pygame.time.Clock() #create a clock function to keep speeds and frames constant

icon = pygame.image.load("slime.png")
pygame.display.set_icon(icon)

#Adding the diferent tank pngs
tower1_img = pygame.image.load(path.join(img_dir, "001-tank.png")).convert()
tower2_img = pygame.image.load(path.join(img_dir, "008-tank.png")).convert()
tower3_img = pygame.image.load(path.join(img_dir, "004-tank.png")).convert()
tower4_img = pygame.image.load(path.join(img_dir, "003-tank.png")).convert()
tower5_img = pygame.image.load(path.join(img_dir, "005-tank.png")).convert()
tower6_img = pygame.image.load(path.join(img_dir, "006-tank.png")).convert()
tower7_img = pygame.image.load(path.join(img_dir, "007-tank.png")).convert()

#Setting coordinates to variables so towers can be placed easier
centerx = WIDTH/2    #x coordinate of the tank
row1y = HEIGHT* 1/4 -10  #y coordinate of the tank
row2y = HEIGHT* 2/4 - 35  #y coordinate of the tank
row3y = HEIGHT* 3/4 -65 #y coordinate of the tank
column1 = WIDTH/11
column2 = 2*WIDTH/11
column3 = 3*WIDTH/11
column4 = 4*WIDTH/11
column5 = 5*WIDTH/11
column6 = 6*WIDTH/11
column7 = 7*WIDTH/11
column8 = 8*WIDTH/11
column9 = 9*WIDTH/11
column10 = 10*WIDTH/11

scale = 50 #scale of the tower (lengthx width cause square)
speed = 7
#speed of bullet
size = 10 #size of bullet (square)

towers = pygame.sprite.Group()
bullets = pygame.sprite.Group()

#_______Creating Class for towers
class Towers(pygame.sprite.Sprite):
    def __init__(self,x,y,s,sprite,attack_speed): #inintialize
        pygame.sprite.Sprite.__init__(self)
        self.sprite = sprite #takes the sprite as an argument, to reuse the class for each sprite instance
        self.x = x
        self.y = y
        self.s = s
        self.attack_speed = attack_speed
        self.image = pygame.transform.scale(self.sprite, (self.s,self.s)) #uses argumetns to set the scale
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = self.x
        self.rect.centery = self.y
        self.radius = 100       #sets the radius of each tower at 100 pixels
        self.timer = 0      #makes a timer for the shooting delay
    def shoot(self,mousex,mousey,speed,size,damage): #the shoot function whcih takes arguemtns tot where to target towars. The mousex and mousey actually represent the
        #coordinates of the enemy in the target list at index (0)
        self.mousex = mousex
        self.damage = damage
        self.mousey = mousey
        self.size = size
        self.speed = speed
        self.timer += dt #increments the timer using the fps so that the tower can shoot at a specific fire rate
        bullet = ammos(self.rect.left,self.rect.centery,self.mousex,self.mousey,self.speed,self.size, self.damage) #calls the ammos function to actually create the bullet,
        #asks for MANY arguments
        if self.timer >= self.attack_speed:
            self.timer -= self.attack_speed
            shoot_sound.play()
            bullets.add(bullet)


class ammos(pygame.sprite.Sprite):     #Class of all ammo/bullets/owie thingies
    def __init__(self, x, y, mousex, mousey, speed, size, damage):
        pygame.sprite.Sprite.__init__(self)
        self.damage = damage #sets the damage of the bullet
        self.x = x
        self.y = y
        self.size = size
        self.gotox = mousex
        self.gotoy = mousey
        self.image = pygame.Surface((self.size, self.size))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.speed = speed

        #calculates the distance that the bullet must travel to the target for the x axis and y axis
        self.dx = self.gotox - self.x 
        self.dy = self.gotoy - self.y

        #finds thge slope based on the distances in the x and y axis
        self.slope = (self.dy / max(1, self.dx))
        #calculates the end coordinate the bullet must travek to
        self.gotox += self.gotox * self.slope
        self.gotoy += self.gotoy * self.slope
        #calculates the distance it needs to travel by using trig, calculates the hypontenuse using tan func and pythagorithms theorum
        self.dist = max(1, math.hypot(self.dx, self.dy))

        #sets the starting bullet positons/coordinates
        self.rect.centerx = self.x
        self.rect.centery = self.y
        


    def update(self,dt): #take sin arguymetns of dt or delay time
        self.vx = self.speed * (self.dx / self.dist) # finds the velocity as a vector on the x-axis, yay physics class and vice versa for the y
        self.vy = self.speed * (self.dy / self.dist)
        #adds teh x and y cooridinates seperates as vextors calculated earliers
        self.x += self.vx
        self.y += self.vy

        self.rect.center = (self.x,self.y) # increments the bullet (moves it each frame)
        
        if self.rect.bottom < 0 or self.rect.top > 519 or self.rect.left > 699 or self.rect.right < 0:
            self.kill() #kill the bullet if it leaves the screen

tower1 = Towers(column8,row1y,50,tower1_img,1*s)
tower2 = Towers(column5,row1y,50,tower1_img,1*s)
tower3 = Towers(500,row2y,60,tower3_img,1.5*s)
tower4 = Towers(centerx,row3y,60,tower4_img,0.5*s)
tower5 = Towers(400,row2y,60,tower5_img,0.5*s)
tower6 = Towers(200,row1y,60,tower6_img,1.5*s)
tower7 = Towers(200,row2y,60,tower7_img,0.1*s)

def gameLoopPT1(): #the game loop to add certain towers when it reaches certain levels
    try: #for error handling because if 2 bullet shit an enemy at the same time an error occures
        tower1Range = pygame.sprite.spritecollide(tower1, enemies, False, pygame.sprite.collide_circle) #creates a list when the enemy enters the tower range
        if enemyhits: # if the listr contains something, or in other words if an enermy is in the tower range
            hit_sound.play() #plays a sound
            for e in enemies:   #for loop to check each enemy
                for b in bullets: # for loop to check every bullet (diff bullets have diff properties)
                    e.health -= b.damage #subract the enemy health with bullet damge
                    bullets.remove(b) #always delete the bullet when it has been hit   
        for i in enemies: #checks each enemy
            if tower1Range: # if its in the range
                    target.append(i) # add the enemey to the target lsit
        if tower1Range:
            enemyx = target[0].rect.centerx #setts the cooordinates for the rarget
            enemyy = target[0].rect.centery
            tower1.shoot(enemyx,enemyy,4,10,1) #(targetx,targety,bullet speed, bullet size,damage)
        for e in target: #for enemies in the target list (enemies in the range)
            if enemyhits: #if its been hit, remove from the list cause you no longer need to target it
                target.remove(e)
            if not tower1Range: #if the enemy is no longer in the range, also remove it, this is very finicky which is why you see the tower shooting at the wrong enemy
                target.remove(e)
    #________________________this is the same as the earlier if state,ent, one for each level is needed, yes i could not soft code it :(__________________________________
        if level >= 2:
            tower2Range = pygame.sprite.spritecollide(tower2, enemies, False, pygame.sprite.collide_circle)
            if enemyhits:
                hit_sound.play()
                for e in enemies:   
                    for b in bullets:
                        e.health -= b.damage
                        bullets.remove(b)      
            for i in enemies:
                if tower2Range: 
                        target.append(i)
            if tower2Range:
                enemyx = target[0].rect.centerx
                enemyy = target[0].rect.centery
                tower2.shoot(enemyx,enemyy,4,10,1)
            for e in target:
                if enemyhits:
                    target.remove(e)
                if not tower2Range:
                    target.remove(e)
                    
    #______________________________________________________________________________________________
        if level >= 4:
            tower3Range = pygame.sprite.spritecollide(tower3, enemies, False, pygame.sprite.collide_circle)
            if enemyhits:
                hit_sound.play()
                for e in enemies:   
                    for b in bullets:
                        e.health -= b.damage
                        bullets.remove(b)
     
            for i in enemies:
                if tower3Range: 
                        target.append(i)
            if tower3Range:
                enemyx = target[0].rect.centerx
                enemyy = target[0].rect.centery
                tower3.shoot(enemyx,enemyy,3,30,1)
            for e in target:
                if enemyhits:
                    target.remove(e)
                if not tower3Range:
                    target.remove(e)
    #_____________________________________________________________________________________________________________
        if level >= 5:
            tower4Range = pygame.sprite.spritecollide(tower4, enemies, False, pygame.sprite.collide_circle)
            if enemyhits:
                hit_sound.play()
                for e in enemies:   
                    for b in bullets:
                        e.health -= b.damage
                        bullets.remove(b)    
            for i in enemies:
                if tower4Range: 
                        target.append(i)
            if tower4Range:
                enemyx = target[0].rect.centerx
                enemyy = target[0].rect.centery
                tower4.shoot(enemyx,enemyy,5,5,2)
            for e in target:
                if enemyhits:
                    target.remove(e)
                if not tower4Range:
                    target.remove(e)
    #_____________________________________________________________________________________________________________
        if level >= 7:
            tower5Range = pygame.sprite.spritecollide(tower5, enemies, False, pygame.sprite.collide_circle)
            if enemyhits:
                hit_sound.play()
                for e in enemies:   
                    for b in bullets:
                        e.health -= b.damage
                        bullets.remove(b)    
            for i in enemies:
                if tower5Range: 
                        target.append(i)
            if tower5Range:
                enemyx = target[0].rect.centerx
                enemyy = target[0].rect.centery
                tower5.shoot(enemyx,enemyy,6,size,1)
            for e in target:
                if enemyhits:
                    target.remove(e)
                if not tower5Range:
                    target.remove(e)
    #________________________________________________________________________________________________________________________
        if level >= 9:
            tower6Range = pygame.sprite.spritecollide(tower6, enemies, False, pygame.sprite.collide_circle)
            if enemyhits:
                hit_sound.play()
                for e in enemies:   
                    for b in bullets:
                        e.health -= b.damage
                        bullets.remove(b)   
            for i in enemies:
                if tower6Range: 
                        target.append(i)
            if tower6Range:
                enemyx = target[0].rect.centerx
                enemyy = target[0].rect.centery
                tower6.shoot(enemyx,enemyy,6,size,5)
            for e in target:
                if enemyhits:
                    target.remove(e)
                if not tower6Range:
                    target.remove(e)
    #____________________________________________________________________________________________
        if level >= 12:
            tower7Range = pygame.sprite.spritecollide(tower7, enemies, False, pygame.sprite.collide_circle)
            if enemyhits:
                hit_sound.play()
                for e in enemies:   
                    for b in bullets:
                        e.health -= b.damage
                        bullets.remove(b)      
            for i in enemies:
                if tower7Range: 
                        target.append(i)
            if tower7Range:
                enemyx = target[0].rect.centerx
                enemyy = target[0].rect.centery
                tower7.shoot(enemyx,enemyy,7,size,1)
            for e in target:
                if enemyhits:
                    target.remove(e)
                if not tower7Range:
                    target.remove(e)
    except Exception as ex:
        pass
#________________________________________________________________________________________________________________
def addTowerLevel(): # defines a func that adds towers beased on what elvel it is
    #print(level)
    if level >= 2:
        towers.add(tower2)
    if level >= 4:
        towers.add(tower3)
    if level >= 5:
        towers.add(tower4)
    if level >= 7:
        towers.add(tower5)
    if level >= 9:
        towers.add(tower6)
    if level >= 12:
        towers.add(tower7)
